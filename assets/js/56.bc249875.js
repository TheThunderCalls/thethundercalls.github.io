(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{338:function(a,v,t){"use strict";t.r(v);var s=t(10),r=Object(s.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"jvm、jre、jdk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm、jre、jdk"}},[a._v("#")]),a._v(" JVM、JRE、JDK")]),a._v(" "),v("h3",{attrs:{id:"jvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),v("p",[a._v("​\tJava Virtual Machine，即Java虚拟机，运行在操作系统之上，存在于内存中，与内存打交道，与硬件没有直接交互，是Java语言实现跨平台的核心")]),a._v(" "),v("p",[a._v("​\tJVM是一种抽象、虚拟出来的计算机，和实际的计算机一样，它具有指令集并使用不同的存储区域，负责执行指令，还要管理数据，内存和寄存器等")]),a._v(" "),v("p",[a._v("​\tJava虚拟机是JRE的一部分，它是整个java实现跨平台的最核心的部分，负责解释执行字节码文件，是可运行java字节码文件的虚拟计算机。所有平台上的JVM向编译器提供相同的接口，而编译器只需要面向虚拟机，生成虚拟机能识别的代码，然后由虚拟机来解释执行")]),a._v(" "),v("p",[a._v("​\tJVM主要负责运行Java编译器编译后的字节码文件(.class文件)。这些字节码只面向JVM，不同平台的JVM都是不同的，但是它们都提供了相同的接口。JVM是Java程序跨平台的关键部分，只要为不同平台实现了相应的虚拟机，编译后的Java字节码就可以在该平台上运行。把字节码编译成具体平台上的机器码执行。JVM自己无法执行，必须联合JRE中的Java基础和核心类库才能使用")]),a._v(" "),v("h3",{attrs:{id:"jre"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jre"}},[a._v("#")]),a._v(" JRE")]),a._v(" "),v("p",[a._v("​\tJava Runtime Environment，即Java运行环境，支持Java程序运行的标准环境，包含JVM标准实现及Java核心类库。JRE中包含了JVM，runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。")]),a._v(" "),v("p",[a._v("jre1.8目录包含：")]),a._v(" "),v("p",[a._v("​\tbin：有java.exe但没有javac.exe，无法编译Java程序，但可以运行Java程序 [可以理解为JVM]")]),a._v(" "),v("p",[a._v("​\tlib：Java基础和核心类库，如rt.jar，也包含JVM运行时需要的类库")]),a._v(" "),v("h3",{attrs:{id:"jdk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[a._v("#")]),a._v(" JDK")]),a._v(" "),v("p",[a._v("​\tJava Development Kit，即Java开发工具包，是一个编写Java应用程序的开发环境，是Java的核心所在。")]),a._v(" "),v("p",[a._v("​\tJDK是整个Java的核心，包括了JRE(Java运行环境)，同时在jdk文件夹bin目录中包含一些Java开发工具(例如：jconsole、javac、java、javadoc、native2ascii、jar等)。JDK = JRE + Java开发工具(编译器、反编译器、调试器等)")]),a._v(" "),v("p",[a._v("jdk1.8目录包含：")]),a._v(" "),v("p",[a._v("​\tbin：一堆exe文件，可执行的开发工具")]),a._v(" "),v("p",[a._v("​\tjre：java运行环境，包括JVM + Java基础和核心类库")]),a._v(" "),v("p",[a._v("​\tlib：本地资源库，包含dt.jar + tools.jar的常用类库、开发依赖包")]),a._v(" "),v("p",[a._v("​\tinclude：Java和JVM交互用的头文件")]),a._v(" "),v("h2",{attrs:{id:"class文件、jar包和war包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class文件、jar包和war包"}},[a._v("#")]),a._v(" Class文件、Jar包和war包")]),a._v(" "),v("h3",{attrs:{id:"class文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class文件"}},[a._v("#")]),a._v(" class文件")]),a._v(" "),v("h4",{attrs:{id:"生成方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成方案"}},[a._v("#")]),a._v(" 生成方案")]),a._v(" "),v("p",[a._v("​\tclass文件是通过编译Java源代码生成的，它包含了字节码和其他与类有关的元数据信息")]),a._v(" "),v("h5",{attrs:{id:"使用java编译器-javac"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用java编译器-javac"}},[a._v("#")]),a._v(" 使用Java编译器(javac)")]),a._v(" "),v("p",[a._v("​\tJava编译器(javac) 是Java开发工具包(JDK)的一部分，它可以将Java源代码编译成字节码文件(.class)。我们可以通过在命令行中运行javac命令来生成class文件。")]),a._v(" "),v("h5",{attrs:{id:"使用java编译器提供的api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用java编译器提供的api"}},[a._v("#")]),a._v(" 使用Java编译器提供的API")]),a._v(" "),v("p",[a._v("​\tJavaCompiler 类的 run() 编译指定的Java源文件")]),a._v(" "),v("h5",{attrs:{id:"使用java反射api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用java反射api"}},[a._v("#")]),a._v(" 使用Java反射API")]),a._v(" "),v("p",[a._v("​\tJava反射API提供了一种动态操作类和对象的机制，它可以在运行时生成类的实例、调用类的方法和访问类的字段等。我们可以使用Java反射API来动态生成一个Java类的字节码，并将其保存为class文件")]),a._v(" "),v("h5",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),v("p",[a._v("​\t生成Java class文件的两种方案：使用Java编译器和Java反射API。使用Java编译器可以轻松地将Java源代码编译成class文件，而使用Java反射API可以在运行时动态生成类的字节码并保存为class文件。")]),a._v(" "),v("h4",{attrs:{id:"执行class文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行class文件"}},[a._v("#")]),a._v(" 执行class文件")])])}),[],!1,null,null,null);v.default=r.exports}}]);