(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{328:function(t,a,s){"use strict";s.r(a);var n=s(10),p=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),a("p",[t._v("​\t在java中，可以将一个类定义在另一个类里面或者类的方法中，这样的类称为内部类。")]),t._v(" "),a("h2",{attrs:{id:"成员内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员内部类"}},[t._v("#")]),t._v(" 成员内部类")]),t._v(" "),a("p",[t._v("​\t内部类中"),a("font",{attrs:{color:"red"}},[t._v("不能含有")]),t._v(" 以static修饰的变量 / 方法")],1),t._v(" "),a("p",[t._v("​\t"),a("em",[a("u",[a("strong",[t._v("内部类访问外部类")])])])]),t._v(" "),a("p",[t._v("​\t成员内部类可以无条件访问外部类的所有成员属性和成员方法【包括private成员和静态成员】")]),t._v(" "),a("p",[t._v("​\t当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("外部类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("成员变量\n外部类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("成员方法\n")])])]),a("p",[t._v("​\t"),a("em",[a("u",[a("strong",[t._v("外部类访问内部类")])])])]),t._v(" "),a("p",[t._v("​\t在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问。该内部类对象"),a("font",{attrs:{color:"red"}},[t._v("可以访问")]),t._v("private私有变量/方法")],1),t._v(" "),a("p",[t._v("​\t"),a("em",[a("u",[a("strong",[t._v("其他类访问内部类")])])])]),t._v(" "),a("p",[t._v("​\t成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("外部类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("内部类 变量名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 外部类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 内部类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("​\t"),a("em",[a("u",[a("strong",[t._v("内部类的访问权限")])])])]),t._v(" "),a("p",[t._v("​\t内部类可以使用private public protected default修饰，")]),t._v(" "),a("ul",[a("li",[t._v("​\t如果使用private修饰，则只能使用外部类访问内部类")]),t._v(" "),a("li",[t._v("​    如果使用protected修饰，则只能在同一个包下或者继承外部类的情况下访问")]),t._v(" "),a("li",[t._v("​    如果使用默认权限(default)修饰，则只能在同一个包下访问")]),t._v(" "),a("li",[t._v("​    如果使用public修饰，则任何地方都能访问")])]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h2",{attrs:{id:"静态内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类"}},[t._v("#")]),t._v(" 静态内部类")]),t._v(" "),a("p",[t._v("​\t静态内部类可以存在 以 static 修饰的变量 / 方法")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("​\t静态内部类不需要依赖于外部类，并且不能使用外部类的非static变量 / 方法。")]),t._v(" "),a("p",[t._v("​\t外部类可以正常使用静态内部类的静态/非静态变量(方法)")]),t._v(" "),a("p",[t._v("​\t静态变量(方法)可以直接使用类名.变量(方法)名调用，非静态变量(方法)需要先创建一个静态内部类对象")]),t._v(" "),a("p",[t._v("​\t其他类中无法访问静态内部类的非静态方法，静态方法的访问直接由外部类名和内部类名访问【遵守访问修饰符访问范围】")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("外部类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("内部类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("变量名\n外部类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("内部类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("​")]),t._v(" "),a("h2",{attrs:{id:"局部内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部内部类"}},[t._v("#")]),t._v(" 局部内部类")]),t._v(" "),a("p",[t._v("​\t局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内")]),t._v(" "),a("p",[t._v("​\t局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的 【类不能使用这些修饰符修饰，里面的属性方法可以】")]),t._v(" "),a("h2",{attrs:{id:"匿名内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类"}},[t._v("#")]),t._v(" 匿名内部类")]),t._v(" "),a("p",[t._v("​\t匿名内部类指没有类名的内部类")]),t._v(" "),a("p",[t._v("​\t匿名内部类只能使用一次，并且继承一个父类或实现一个接口")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("​\t"),a("em",[a("u",[a("strong",[t._v("注意：")])])])]),t._v(" "),a("p",[t._v("​\t匿名内部类使用外部类方法中的局部变量时，需要该局部变量为final修饰的。在jdk8及之后，final可以不显示定义，编译器会自动添加final")])])}),[],!1,null,null,null);a.default=p.exports}}]);