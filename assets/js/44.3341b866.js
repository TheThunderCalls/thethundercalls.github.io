(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{325:function(t,a,s){"use strict";s.r(a);var n=s(10),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类与对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与对象"}},[t._v("#")]),t._v(" 类与对象")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("类")]),t._v(" "),a("p",[t._v("类是对一类事物的描述，是抽象的，概念上的定义")])]),t._v(" "),a("h2",{attrs:{id:"类的成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的成员"}},[t._v("#")]),t._v(" 类的成员")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 构造方法\n *\n * 成员变量\n * 成员方法\n *\n * 类变量\n * 类方法\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassAndObjectDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassAndObjectDemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("构造方法")]),t._v(" "),a("p",[t._v("构造方法是用于初始化对象的特殊方法，在使用 new 关键词创建对象时自动调用与之形参对应的构造方法")]),t._v(" "),a("p",[t._v("每个类中至少有一个构造方法，如果未显示声明，则系统将生成一个默认的无参构造方法。同一个类中构造方法可重载多个")]),t._v(" "),a("p",[t._v("一旦显示声明了构造方法，则系统不会生成默认的构造方法，此时如果需要无参构造方法，则应显示声明无参构造方法")]),t._v(" "),a("p",[t._v("构造方法不能被static、final、synchronized、abstract、native修饰")])]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("形参数据类型 形参名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​\t构造方法没有返回值类型，在构造方法里不能使用return返回对象，构造方法方法名和类名相同")]),t._v(" "),a("p",[t._v("访问：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("类名 变量名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("实参"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("​\t当使用 new 关键字来创建对象时，默认调用与实参对应的形参的构造方法")]),t._v(" "),a("h3",{attrs:{id:"成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员变量"}},[t._v("#")]),t._v(" 成员变量")]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 数据类型 变量名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("访问：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("位置")]),t._v(" "),a("th",[t._v("访问方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("当前类")]),t._v(" "),a("td",[t._v("this.变量名;【this 可以省略，当方法中存在同名的局部变量时则不能省略】")])]),t._v(" "),a("tr",[a("td",[t._v("其它类")]),t._v(" "),a("td",[t._v("obj.变量名;【obj 为在其他类中创建的当前类的对象】")])])])]),t._v(" "),a("h3",{attrs:{id:"成员方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员方法"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("返回值数据类型，不止可以是基本数据类型及所有类，还存在特殊值 void - 表示该成员方法不返回值，此时 return 关键字可省略")]),t._v(" "),a("p",[t._v("形参可以为多个，当调用对应的方法时，需要保证方法名、形参数据类型及其位置都一致")])]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 返回值数据类型 方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("形参数据类型 形参名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t方法体"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("访问：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("位置")]),t._v(" "),a("th",[t._v("访问方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("当前类")]),t._v(" "),a("td",[t._v("this.方法名(实参...); 【this 可以省略】")])]),t._v(" "),a("tr",[a("td",[t._v("其它类")]),t._v(" "),a("td",[t._v("obj.方法名(实参...);【obj 为在其他类中创建的当前类的对象】")])])])]),t._v(" "),a("h3",{attrs:{id:"类变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类变量"}},[t._v("#")]),t._v(" 类变量")]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" 数据类型 变量名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("访问：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("位置")]),t._v(" "),a("th",[t._v("访问方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("当前类")]),t._v(" "),a("td",[t._v("变量名;")])]),t._v(" "),a("tr",[a("td",[t._v("其它类")]),t._v(" "),a("td",[t._v("类名.变量名;")])])])]),t._v(" "),a("h3",{attrs:{id:"类方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类方法"}},[t._v("#")]),t._v(" 类方法")]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" 返回值数据类型 方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("形参数据类型 形参名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t方法体"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("访问：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("位置")]),t._v(" "),a("th",[t._v("访问方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("当前类")]),t._v(" "),a("td",[t._v("方法名(实参...);")])]),t._v(" "),a("tr",[a("td",[t._v("其它类")]),t._v(" "),a("td",[t._v("类名.方法名(实参...);")])])])]),t._v(" "),a("h3",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("常量")]),t._v(" "),a("p",[t._v("特殊的类变量【含final，表示该变量不可变，即需要在初始时就确认，并永远不会再改】")])]),t._v(" "),a("p",[t._v("声明：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("访问权限修饰符 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" 数据类型 变量名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),a("h3",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("this")]),t._v(" "),a("p",[t._v("this 是一个关键字，一个引用，保存内存地址指向自身")])]),t._v(" "),a("p",[t._v("this 在成员方法中的使用：")]),t._v(" "),a("p",[t._v("​\tthis 关键字只能在非静态方法中使用，表示对当前对象的引用。")]),t._v(" "),a("p",[t._v("​\t可以用来区分 成员变量 和 方法中的局部变量，防止产生歧义。")]),t._v(" "),a("p",[t._v("​\t当需要明确指出当前对象的引用时，才使用 this 关键字。例如，可用在 return 语句中，返回对当前对象的引用。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//测试 this 关键字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassAndObjectDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testThis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("this 在构造方法中的使用")]),t._v(" "),a("p",[t._v("​\t可以使用 this 关键字在构造方法中使用，表示调用其它不同的构造方法【 this(实参...) 】")]),t._v(" "),a("p",[t._v("​\t注意：this(实参...) 在构造方法中只能调用一次，并且必须写在方法体的第一行")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassAndObjectDemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[t._v("#")]),t._v(" static")]),t._v(" "),a("h4",{attrs:{id:"静态变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态变量"}},[t._v("#")]),t._v(" 静态变量")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("当一个类的所有对象的某个“属性值”不会随着对象的改变而变化的时候，建议将该属性定义为静态属性（或者说把这个变量定义为静态变量）")])]),t._v(" "),a("li",[a("p",[t._v("静态变量在类加载的时候初始化，存储在方法区当中，不需要创建对象，直接通过“类名”来访问。")])])]),t._v(" "),a("h4",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("静态方法和静态变量一样存储在方法区当中，不需要创建对象，直接通过”类名”来访问")])]),t._v(" "),a("li",[a("p",[t._v("静态方法中不能包含实例变量，由于静态方法不需要创建对象就可以访问，此时不存在对象则无法获取实例变量")])])]),t._v(" "),a("h4",{attrs:{id:"静态代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态代码块"}},[t._v("#")]),t._v(" 静态代码块")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t\t代码块"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​\t静态代码块在类加载时执行，并且只执行一次")]),t._v(" "),a("h3",{attrs:{id:"final"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[t._v("#")]),t._v(" final")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("final")]),t._v(" "),a("p",[t._v("1] final修饰的类无法继承")]),t._v(" "),a("p",[t._v("2] final修饰的方法无法覆盖")]),t._v(" "),a("p",[t._v("3] final修饰的变量只能赋一次值")]),t._v(" "),a("p",[t._v("4] final修饰的引用一旦指向某个对象，则不能再指向其他对象，但该引用指向的对象内部数据可以修改")]),t._v(" "),a("p",[t._v("5] final修饰的实例变量必须手动初始化，不能采用系统默认值")]),t._v(" "),a("p",[t._v("6] final修饰的实例能量一般和static联合使用，称为常量")])]),t._v(" "),a("p",[t._v("Java 的 final 关键字在不同的上下文环境里含义可能会略有不同，但一般来说，它表示“这是无法更改的”。")]),t._v(" "),a("h4",{attrs:{id:"修饰数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰数据"}},[t._v("#")]),t._v(" 修饰数据")]),t._v(" "),a("blockquote",[a("p",[t._v("常量之所以有用，有两个原因：")]),t._v(" "),a("p",[t._v("​\t1] 它可以是一个永远不会改变的编译时常量")]),t._v(" "),a("p",[t._v("​\t2] 它可以是在运行时初始化的值，而不希望它被改变")])]),t._v(" "),a("ul",[a("li",[t._v("编译时常量")])]),t._v(" "),a("p",[t._v("编译器可以将常量值折叠到计算中，即：常量的计算可以在编译时进行，这节省了运行时的开销。编译时常量必须是基本数据类型，并用 final 关键字表示，在定义常量时必须初始化一个值。")]),t._v(" "),a("p",[t._v("当 final 关键字修饰的数据类型是对象引用时，只能限制为引用恒定不变，但是对象本身的属性值是可以变化的")]),t._v(" "),a("ul",[a("li",[t._v("空白 final")])]),t._v(" "),a("p",[t._v("空白 final 表示没有显示初始化的 final 变量，此时，在每个构造方法中都必须对该变量初始化")]),t._v(" "),a("ul",[a("li",[t._v("final 参数")])]),t._v(" "),a("p",[t._v("可以使用 final 修饰的数据作为实参传入方法中，此时该方法只能对参数执行读操作。该功能主要用于将数据传递到匿名内部类")]),t._v(" "),a("h4",{attrs:{id:"修饰方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰方法"}},[t._v("#")]),t._v(" 修饰方法")]),t._v(" "),a("p",[t._v("final 修饰方法的原因：在方法上放置一个“锁”，这样就可以防止继承类通过重写来改变改方法")]),t._v(" "),a("h4",{attrs:{id:"修饰类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰类"}},[t._v("#")]),t._v(" 修饰类")]),t._v(" "),a("p",[t._v("将这个类定义为 final 时，组织了该类的所有继承，即：该类没有子类")])])}),[],!1,null,null,null);a.default=v.exports}}]);