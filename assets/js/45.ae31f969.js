(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{326:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"三大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大特性"}},[t._v("#")]),t._v(" 三大特性")]),t._v(" "),a("h2",{attrs:{id:"封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),a("p",[t._v("在创建新的类时，只需要把必要的接口暴露出去，隐藏其它所有不必要的信息。隐藏代码的具体实现可以有效减少程序bug。")]),t._v(" "),a("p",[t._v("访问控制常常被称为实现隐藏，将数据和方法包装在类中，并与实现隐藏相结合，称为封装。")]),t._v(" "),a("p",[t._v("设置访问控制的原因：")]),t._v(" "),a("p",[t._v("​\t\t1] 防止外部接触到他们不改接触的内容，即：那些用于数据类型内部运转的代码，而非那些用于解决特定问题的接口的部分")]),t._v(" "),a("p",[t._v("​\t\t2] 在改变类的内部工作机制时，不用担心影响到外部使用该类")]),t._v(" "),a("p",[t._v("实现：Java 提供了三个显示关键字来设置访问权限")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h3",{attrs:{id:"package【库单元】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package【库单元】"}},[t._v("#")]),t._v(" package【库单元】")]),t._v(" "),a("blockquote",[a("p",[t._v("为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。类是在同一个包中还是在单独的包中，会影响到访问权限修饰符")]),t._v(" "),a("p",[t._v("作用：")]),t._v(" "),a("ol",[a("li",[t._v("把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用")]),t._v(" "),a("li",[t._v("如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突")]),t._v(" "),a("li",[t._v("包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类")])])]),t._v(" "),a("h4",{attrs:{id:"编译单元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译单元"}},[t._v("#")]),t._v(" 编译单元")]),t._v(" "),a("p",[t._v("一个 Java 源代码文件就是一个"),a("strong",[t._v("编译单元")]),t._v("。每个编译单元必须有一个以 "),a("code",[t._v(".java")]),t._v(" 结尾的文件名。")]),t._v(" "),a("p",[t._v("在编译单元内，最多可以有一个 public 类，它必须与文件名同名[包括大小写，但不包括.java后缀]。")]),t._v(" "),a("h4",{attrs:{id:"代码组织"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码组织"}},[t._v("#")]),t._v(" 代码组织")]),t._v(" "),a("p",[t._v("当编译一个 .java 文件时，文件中的每一个类都会有一个对应的输出文件，输出文件名就是对应的类名，后缀为 .class。")]),t._v(" "),a("p",[t._v("在 Java 中一个可运行程序就是一堆 .class 文件，可以使用 jar 归档器将它们打包并压缩成一个 Java 档案文件( JAR )。Java 解释器负责查找、加载和解释这些文件")]),t._v(" "),a("p",[t._v("库就是一组这样的类文件。每个源文件通常都有一个 public 类和任意数量的非 public 类，因此每个源文件都有一个公共组件。如果想让这些组件都属于一个命名空间，可以使用 package 关键字")]),t._v(" "),a("p",[t._v("如果使用 package 语句，那它必须出现在文件中的第一个非注释处")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这样就表示这个编译单元是名为 java.util 的库的一部分。")]),t._v(" "),a("p",[t._v("而如果在其它类中希望使用该库中的任何其它 public 类，则可以使用 import 引入")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"访问权限修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问权限修饰符"}},[t._v("#")]),t._v(" 访问权限修饰符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("当前类")]),t._v(" "),a("th",[t._v("同package")]),t._v(" "),a("th",[t._v("子孙类")]),t._v(" "),a("th",[t._v("其它package")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("public")])]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("protected")])]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("不可访问")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("default")])]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("不可访问")]),t._v(" "),a("td",[t._v("不可访问")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("private")])]),t._v(" "),a("td",[t._v("可访问")]),t._v(" "),a("td",[t._v("不可访问")]),t._v(" "),a("td",[t._v("不可访问")]),t._v(" "),a("td",[t._v("不可访问")])])])]),t._v(" "),a("h4",{attrs:{id:"public"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[t._v("#")]),t._v(" public")]),t._v(" "),a("p",[t._v("当使用 public 关键字修饰时，意味着该成员对于所有人来说都是可用的")]),t._v(" "),a("h4",{attrs:{id:"包访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包访问"}},[t._v("#")]),t._v(" 包访问")]),t._v(" "),a("p",[t._v("默认访问权限没有关键字，通常称为包访问权限。这意味着当前包中的所有其它类都可以访问该成员。对于此包之外的所有类，该成员不可被访问。")]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("一个 Java 文件中的所有类都属于同一个包，所以同一个 Java 文件中的所有类都通过包访问权限来互相访问")]),t._v(" "),a("li",[t._v("无论两个类是否为继承关系，只有在同一个包中，才能访问包访问权限修饰的成员。")])]),t._v(" "),a("h4",{attrs:{id:"private"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[t._v("#")]),t._v(" private")]),t._v(" "),a("p",[t._v("private 关键字意味着：除了包含该成员的类外，其它任何类都不能访问该成员")]),t._v(" "),a("h4",{attrs:{id:"protected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protected"}},[t._v("#")]),t._v(" protected")]),t._v(" "),a("p",[t._v("protected 关键字处理的是继承的概念：")]),t._v(" "),a("p",[t._v("如果创建了一个新包，并需要继承"),a("u",[t._v("另一个包中")]),t._v("的类，那么唯一可以访问的成员就是这个类的 public 成员")]),t._v(" "),a("p",[t._v("如果继承的是"),a("u",[t._v("同一个包中")]),t._v("的类，那么还可以访问包访问权限( default )的成员了")]),t._v(" "),a("p",[t._v("如果想要将特定成员的访问权限赋给"),a("u",[t._v("子类")]),t._v("，而不是所有类，则可以使用 protected 了。除此之外，protected 还提供了包访问权限，即：同一个包中的其它类也可以访问 protected 成员")]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("一个类呈现的内容不只是对象能做什么、不能做什么，它还可以关联其它的类。两个类可以拥有相同的行为和特征，但一个类可以比另一个类拥有更多的特征，以及处理更多的消息。"),a("strong",[t._v("继承")]),t._v("通过基类和子类的概念来表述这种相似性，即：基类拥有的所有特征和行为都可以与子类共享")]),t._v(" "),a("p",[t._v("继承已有的类将产生新类，新的子类不但会继承其基类所有的成员(虽然private成员是隐藏且不可访问的)，子类也会继承基类的接口")]),t._v(" "),a("h3",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[t._v("需要在类主体的左花括号之前声明这一点，通过关键字 "),a("strong",[t._v("extends")]),t._v(" 以及后面的"),a("strong",[t._v("基类名称")]),t._v("来实现，只支持单继承")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),a("p",[t._v("多态是指同一个行为具有多种不同表现形式/形态的能力，通过父类的引用变量来引用子类的对象，从而实现对不同对象的统一操作")]),t._v(" "),a("p",[t._v("多态性使用的前提：1) 类的继承  2) 方法重写  3) 父类引用指向子类对象")]),t._v(" "),a("p",[t._v("当"),a("strong",[t._v("调用子父类同名同参数的方法")]),t._v("时，实际上执行的是子类重写父类的方法 -- 虚拟方法调用 -- 在编译期间，只能调用父类中声明的方法，但在运行期，实际上执行的是子类重写父类的方法  "),a("font",{attrs:{color:"red"}},[t._v("总结：编译看左边，运行看右边【 赋值符号 = 】")])],1),t._v(" "),a("h3",{attrs:{id:"向上转型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向上转型"}},[t._v("#")]),t._v(" 向上转型")]),t._v(" "),a("p",[t._v("将子类对象赋值给父类引用的实现叫作”向上转型“。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("一般情况下，方法声明中的形参使用父类，方法引用时实参使用子类对象，这种情况也是向上转型")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testUpward")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testUpward")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"向上转型..."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写"}},[t._v("#")]),t._v(" 重写")]),t._v(" "),a("p",[t._v("修改基类已有方法的行为，称之为 “重写”该方法。如果想要重写一个方法，可以在子类中对其进行重新定义")]),t._v(" "),a("p",[t._v("是子类对父类的 非静态、 非private、 非final方法 的实现过程进行重新编写")]),t._v(" "),a("p",[a("strong",[t._v("重写规则")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("权限修饰符 -- 子类重写方法的权限 "),a("font",{attrs:{color:"red"}},[t._v("不能小于")]),t._v(" 父类方法权限  public > protected > default  [private 修饰的 父类方法 不能被继承，即无法重写]")],1),t._v(" "),a("li",[t._v("返回值 -- 子类重写方法的返回值类型 "),a("font",{attrs:{color:"red"}},[t._v("不能大于")]),t._v(" 父类方法的返回值类型  即【子类返回值类型 为 父类返回值类型及其子类】")],1),t._v(" "),a("li",[t._v("异常 -- 子类重写方法抛出的异常 "),a("font",{attrs:{color:"red"}},[t._v("不能大于")]),t._v(" 父类方法的异常 即【子类抛出的异常 为 父类异常的"),a("font",{attrs:{color:"blue"}},[t._v("子集")]),t._v("及其中异常类的"),a("font",{attrs:{color:"blue"}},[t._v("子类")]),t._v("】")],1),t._v(" "),a("li",[t._v("方法名称、参数列表 -- 子类重写方法中必须和父类方法的一致 (参数列表中对应的参数变量名可以不相同)")])]),t._v(" "),a("p",[a("strong",[t._v("重写注意事项")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("子类只能重写 由父类 继承过来的方法")])]),t._v(" "),a("li",[a("p",[t._v("如果父类方法被 final 修饰了，则子类不能重写该方法")])]),t._v(" "),a("li",[a("p",[t._v("类方法(static修饰) 不能被重写， 但是在子类中可以覆盖父类中的类方法。【子类不能使用实例方法 覆盖 父类中的 类方法】")])]),t._v(" "),a("li",[a("p",[t._v("父类中的私有方法不能被继承 【即无法重写】，但在子类中可以覆盖父类中的私有方法")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*private*/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rewriteMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Father --- rewriteMethod ---"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rewriteMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rewriteMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Son --- rewriteMethod ---"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rewriteMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v('son.useMethod("");')]),t._v(" "),a("p",[t._v("​    当 父类方法 权限修饰符 为 private 时，打印的是 Father --- rewriteMethod ---")]),t._v(" "),a("p",[t._v("​    当 父类方法 权限修饰符为public时，打印的是Son --- rewriteMethod ---")]),t._v(" "),a("p",[t._v("​    由此可发现：父类的私有方法不能被重写")]),t._v(" "),a("p",[t._v("son.rewriteMethod();")]),t._v(" "),a("p",[t._v("​\t无论 父类方法 权限修饰符是什么，打印的都是 Son --- rewriteMethod ---")]),t._v(" "),a("p",[t._v("​\t由此可知：父类私有方法被覆盖了")])]),t._v(" "),a("h3",{attrs:{id:"this-和-super"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-和-super"}},[t._v("#")]),t._v(" this 和 super")]),t._v(" "),a("p",[t._v("super - 父类的内存空间的标识")]),t._v(" "),a("blockquote",[a("p",[t._v("修饰变量 - 获取的是所在类的父类的值")]),t._v(" "),a("p",[t._v("修饰方法 - 获取的是所在类的父类的方法")])]),t._v(" "),a("p",[t._v("this - 当前对象")]),t._v(" "),a("blockquote",[a("p",[t._v("修饰变量 - 无论如何，获取的是所在类对应的值")]),t._v(" "),a("p",[t._v("修饰方法 - 堆中的当前对象，")]),t._v(" "),a("p",[t._v("​\t\t如果在父类方法func()中调用了this.method()，子类中重写了method()方法，当使用子类对象调用方法func()，此时this.method()为子类中的method()")]),t._v(" "),a("p",[t._v("​\t\t注意：this.method()所找的是堆中的对象，在子类使用super调用父类方法时，父类方法中的this.method()也是为子类的method()")])]),t._v(" "),a("p",[t._v("注：所在类 - 编写 Java代码 时，super | this 所在的Java类")])])}),[],!1,null,null,null);a.default=e.exports}}]);